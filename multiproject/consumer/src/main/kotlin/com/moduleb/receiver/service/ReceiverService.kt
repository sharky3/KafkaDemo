package com.moduleb.receiver.service

import com.moduleb.receiver.*
import com.moduleb.receiver.config.ProducerConfig.Companion.topic
import com.moduleb.receiver.config.ConsumerConfig
import com.moduleb.receiver.model.Message
import com.moduleb.receiver.model.Request
import com.moduleb.receiver.repo.MessageRepository
import org.apache.kafka.clients.producer.Producer
import org.apache.kafka.clients.producer.ProducerRecord
import org.slf4j.LoggerFactory
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Service
import java.time.LocalDateTime

@Service
class ReceiverService(private val msgRepo: MessageRepository,
                      private val prod: Producer<String, String>
) {
    private val logger = LoggerFactory.getLogger(ReceiverService::class.java)

    @KafkaListener(topics = [ConsumerConfig.TOPIC], groupId = "b_module_consumer")
    fun receive(msg: String) {
        logger.info("RECEIVED REQUEST $msg FROM TOPIC $topic")

        val request = jsonMapper.readValue(msg, Request::class.java)

        //TODO Consider simplifying: findTimeById(msgRepo.findTopByOrderByIdDesc()?.id) => findTopByOrderBySentDesc().sent
        // if the last request == the one made lately
        // if not maybe select max(id) is enough and faster than findTopByOrderByIdDesc() if id is autogenerated?

        //gets the last record for now => will be previous record after saving the received one
        val previousId = msgRepo.findTopByOrderByIdDesc()?.id ?: -1

        msgRepo.save(Message(sent = request.sent, id = request.id))

        if (previousId != -1L) {
            val previousMessageTime = msgRepo.findTimeById(previousId)
            logger.info("SENDING PREVIOUS REQUEST TIME $previousMessageTime to $topic")
            prod.send(ProducerRecord(topic, jsonMapper.writeValueAsString(previousMessageTime)))
        } else {
            logger.info("NO PREVIOUS REQUESTS FOUND")
            prod.send(ProducerRecord(topic, jsonMapper.writeValueAsString(LocalDateTime.MIN)))
        }
    }
}
